package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"backend/database"
	"backend/graph/model"
	"context"
	"errors"
	"fmt"
)

// AddTranslation is the resolver for the addTranslation field.
func (r *mutationResolver) AddTranslation(ctx context.Context, englishWord string, polishWord string) (*model.Translation, error) {
	if r.DB == nil {
		return nil, errors.New("database connection is nil")
	}
	var engWord database.Word
	var plWord database.Word
	var existingTranslation model.Translation

	err := r.DB.FirstOrCreate(&engWord, database.Word{Word: englishWord, Language: "EN"}).Error
	if err != nil {
		return nil, fmt.Errorf("an error has occured while inserting english word")
	}
	err = r.DB.FirstOrCreate(&plWord, database.Word{Word: polishWord, Language: "PL"}).Error
	if err != nil {
		return nil, fmt.Errorf("an error has occured while inserting polish word")
	}

	sortedTranslation := model.TranslationFromInts(plWord.ID, engWord.ID)
	sortedTranslation.SortTranslation()

	err = r.DB.Where("word_id = ? AND translation_id = ?", sortedTranslation.WordID, sortedTranslation.TranslationID).First(&existingTranslation).Error
	if err == nil {
		return nil, fmt.Errorf("translation already exists")
	}

	err = r.DB.Create(&sortedTranslation).Error
	if err != nil {
		return nil, err
	}
	return &sortedTranslation, nil
}

// GetPolishWords is the resolver for the getPolishWords field.
func (r *queryResolver) GetPolishWords(ctx context.Context, englishWord string) ([]*model.Word, error) {
	panic(fmt.Errorf("not implemented: GetPolishWords - getPolishWords"))
}

// GetEnglishWords is the resolver for the getEnglishWords field.
func (r *queryResolver) GetEnglishWords(ctx context.Context, polishWord string) ([]*model.Word, error) {
	panic(fmt.Errorf("not implemented: GetEnglishWords - getEnglishWords"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *translationResolver) WordID(ctx context.Context, obj *model.Translation) (string, error) {
	panic(fmt.Errorf("not implemented: WordID - wordID"))
}
func (r *translationResolver) TranslationID(ctx context.Context, obj *model.Translation) (string, error) {
	panic(fmt.Errorf("not implemented: TranslationID - translationID"))
}
func (r *wordResolver) ID(ctx context.Context, obj *model.Word) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *Resolver) Translation() TranslationResolver { return &translationResolver{r} }
func (r *Resolver) Word() WordResolver { return &wordResolver{r} }
type translationResolver struct{ *Resolver }
type wordResolver struct{ *Resolver }
*/
