package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"backend/graph/model"
	"backend/utils"
	"context"
	"fmt"
)

// AddTranslation is the resolver for the addTranslation field.
func (r *mutationResolver) AddTranslation(ctx context.Context, englishWord string, polishWord string) (*model.Translation, error) {
	var engWord model.Word
	var plWord model.Word
	var existingTranslation model.Translation

	tx := r.DB.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	err := tx.FirstOrCreate(&engWord, model.Word{Word: englishWord, Language: "EN"}).Error
	if err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("an error has occured while inserting english word")
	}
	err = tx.FirstOrCreate(&plWord, model.Word{Word: polishWord, Language: "PL"}).Error
	if err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("an error has occured while inserting polish word")
	}

	sortedTranslation := model.Translation{WordID: plWord.ID, TranslationID: engWord.ID}
	sortedTranslation.SortTranslation()

	err = tx.Where("word_id = ? AND translation_id = ?", sortedTranslation.WordID, sortedTranslation.TranslationID).First(&existingTranslation).Error
	if err == nil {
		tx.Rollback()
		return nil, fmt.Errorf("translation already exists")
	}

	err = tx.Create(&sortedTranslation).Error
	if err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("an error has occured while inserting translation")
	}

	tx.Commit()
	return &sortedTranslation, nil
}

// AddWord is the resolver for the addWord field.
func (r *mutationResolver) AddWord(ctx context.Context, word string, language string, exampleUsage string) (*model.Word, error) {
	var AddedWord model.Word
	tx := r.DB.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	err := tx.FirstOrCreate(&AddedWord, model.Word{Word: word, Language: language, ExampleUsage: exampleUsage}).Error
	if err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("an error has occured while inserting word")
	}

	tx.Commit()
	return &AddedWord, nil
}

// GetPolishWords is the resolver for the getPolishWords field.
func (r *queryResolver) GetPolishWords(ctx context.Context, englishWord string) ([]*model.Word, error) {
	translatedWords, err := utils.GetTranslations(englishWord, "EN", r.DB)
	if err != nil {
		return nil, fmt.Errorf("an error has while getting translations for english word")
	}
	return translatedWords, nil
}

// GetEnglishWords is the resolver for the getEnglishWords field.
func (r *queryResolver) GetEnglishWords(ctx context.Context, polishWord string) ([]*model.Word, error) {
	translatedWords, err := utils.GetTranslations(polishWord, "PL", r.DB)
	if err != nil {
		return nil, fmt.Errorf("an error has while getting translations for polish word")
	}
	return translatedWords, nil
}

// ExampleUsage is the resolver for the exampleUsage field.
func (r *wordResolver) ExampleUsage(ctx context.Context, obj *model.Word) (string, error) {
	panic(fmt.Errorf("not implemented: ExampleUsage - exampleUsage"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Word returns WordResolver implementation.
func (r *Resolver) Word() WordResolver { return &wordResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type wordResolver struct{ *Resolver }
