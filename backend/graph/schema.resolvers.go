package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"backend/database"
	"backend/graph/model"
	"context"
	"fmt"
	"strconv"
)

// AddTranslation is the resolver for the addTranslation field.
func (r *mutationResolver) AddTranslation(ctx context.Context, englishWord string, polishWord string) (*model.Translation, error) {
	var engWord database.Word
	var plWord database.Word
	var existingTranslation model.Translation

	tx := r.DB.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	err := tx.FirstOrCreate(&engWord, database.Word{Word: englishWord, Language: "EN"}).Error
	if err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("an error has occured while inserting english word")
	}
	err = tx.FirstOrCreate(&plWord, database.Word{Word: polishWord, Language: "PL"}).Error
	if err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("an error has occured while inserting polish word")
	}

	sortedTranslation := model.TranslationFromInts(plWord.ID, engWord.ID)
	sortedTranslation.SortTranslation()

	err = tx.Where("word_id = ? AND translation_id = ?", sortedTranslation.WordID, sortedTranslation.TranslationID).First(&existingTranslation).Error
	if err == nil {
		tx.Rollback()
		return nil, fmt.Errorf("translation already exists")
	}

	err = tx.Create(&sortedTranslation).Error
	if err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("an error has occured while inserting translation")
	}

	tx.Commit()
	return &sortedTranslation, nil
}

func (r *queryResolver) GetTranslations(ctx context.Context, wordToTranslate string, language string) ([]*model.Word, error) {
	var word database.Word
	var translatedWords []*model.Word
	var translations []*model.Translation
	var translatedWordIDS []string

	tx := r.DB.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	err := tx.Where("word = ? and language = ?", wordToTranslate, language).First(&word).Error
	if err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("an error has occured while selecting word")
	}

	err = tx.Where("translation_id = ? or word_id = ?", word.ID, word.ID).Find(&translations).Error
	if err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("an error has occured while selecting translation ids")
	}

	for _, t := range translations {
		if strconv.Itoa(int(word.ID)) == t.WordID {
			translatedWordIDS = append(translatedWordIDS, t.TranslationID)
		} else {
			translatedWordIDS = append(translatedWordIDS, t.WordID)
		}
	}

	err = tx.Where("id in (?)", translatedWordIDS).Find(&translatedWords).Error
	if err != nil {
		tx.Rollback()
		return nil, fmt.Errorf("an error has occured while selecting translations")
	}

	tx.Commit()
	return translatedWords, nil
}

func (r *queryResolver) GetPolishWords(ctx context.Context, englishWord string) ([]*model.Word, error) {
	translatedWords, err := r.GetTranslations(ctx, englishWord, "EN")
	if err != nil {
		return nil, err
	}
	return translatedWords, nil
}

func (r *queryResolver) GetEnglishWords(ctx context.Context, polishWord string) ([]*model.Word, error) {
	translatedWords, err := r.GetTranslations(ctx, polishWord, "PL")
	if err != nil {
		return nil, err
	}
	return translatedWords, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
